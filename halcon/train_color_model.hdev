<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="21.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* Create a window</c>
<l>dev_get_window (WindowHandle)</l>
<l>dev_set_line_width (2)</l>
<c></c>
<c>*** Bocce - Shape Model *********************************************************</c>
<c>* Bocce - model from contour</c>
<l>BocceRadius := 24</l>
<l>gen_circle_contour_xld (ROI_0, 1335, 1163, BocceRadius, 0, 6.28318, 'positive', 1)</l>
<l>create_generic_shape_model (ModelID_Bocce)</l>
<c>* model train param</c>
<l>set_generic_shape_model_param (ModelID_Bocce, 'metric', 'ignore_color_polarity')</l>
<l>set_generic_shape_model_param (ModelID_Bocce, 'angle_start', 0.0)</l>
<l>set_generic_shape_model_param (ModelID_Bocce, 'angle_end', 0.0)</l>
<c>* model search param</c>
<l>set_generic_shape_model_param (ModelID_Bocce, 'max_deformation', 3)</l>
<l>set_generic_shape_model_param (ModelID_Bocce, 'min_score', 0.8)</l>
<l>set_generic_shape_model_param (ModelID_Bocce, 'max_overlap', 0.1)</l>
<l>set_generic_shape_model_param (ModelID_Bocce, 'min_contrast', 22)</l>
<l>set_generic_shape_model_param (ModelID_Bocce, 'num_matches', 4)</l>
<c>* train model</c>
<l>train_generic_shape_model (ROI_0, ModelID_Bocce)</l>
<c></c>
<c>* Set the training images directory</c>
<l>Directory := 'training_images/'</l>
<c></c>
<c>* Set the class characters</c>
<l>TrainingClassSubdirectory := ['b', 'r']</l>
<c></c>
<c>*** Bocce - Color Model **********************************************************</c>
<c>* Create a KNN classifier</c>
<l>FeaturesColor := []</l>
<l>ClassName := ['blue', 'red']</l>
<l>create_class_knn (3, KNNHandle)</l>
<l>Samples := 0</l>
<c>* Create training samples by grabbing 10 images</c>
<l>for J := 0 to |TrainingClassSubdirectory|-1 by 1</l>
<c>    * List files in the training class directory</c>
<l>    tuple_add(Directory, TrainingClassSubdirectory[J], Path)</l>
<l>    list_files(Path, ['files'], ImageFiles)</l>
<c>    </c>
<c>    * Loop over all files</c>
<l>    for F := 0 to |ImageFiles|-1 by 1</l>
<l>        read_image (Image, ImageFiles[F])</l>
<l>        dev_display (Image)</l>
<c>        </c>
<c>        * Find Bocces</c>
<l>        find_generic_shape_model (Image, ModelID_Bocce, MatchResultID_Bocce, NumMatchResult_Bocce)</l>
<c>        </c>
<c>        * Bocce Results</c>
<l>        get_generic_shape_model_result (MatchResultID_Bocce, 'all', 'score', Score)</l>
<l>        get_generic_shape_model_result_object (Matches_Bocce, MatchResultID_Bocce, 'all', 'contours')</l>
<l>        try</l>
<l>            area_center_xld (Matches_Bocce, Area_Bocce, Row_Bocce, Column_Bocce, PointOrder_Bocce)            </l>
<l>        catch (Exception)</l>
<l>            continue</l>
<l>        endtry</l>
<c></c>
<c>        * Convert to HSV</c>
<l>        decompose3 (Image, ImageR, ImageG, ImageB)</l>
<l>        trans_from_rgb (ImageR, ImageG, ImageB, ImageH, ImageS, ImageV, 'hsv')</l>
<l>        compose3(ImageH, ImageS, ImageV, ImageHSV)</l>
<c>    </c>
<c>        * Display</c>
<l>        dev_display(ImageHSV)</l>
<l>        dev_display (Matches_Bocce)</l>
<c>        </c>
<c>        * Grab the Bocce regions</c>
<l>        gen_region_contour_xld (Matches_Bocce, Regions_Bocce, 'filled')</l>
<c>            </c>
<c>        </c>
<c>        * Count the ball regions and loop over them        </c>
<l>        count_obj(Regions_Bocce, Num_Regions)</l>
<l>        for k := 1 to Num_Regions by 1</l>
<c>            * Select the region</c>
<l>            select_obj(Regions_Bocce, Single, k)</l>
<c>            * Get the HSV values</c>
<l>            get_region_points(Single, R, C)</l>
<l>            get_grayval(ImageH, R, C, GrayH)</l>
<l>            get_grayval(ImageS, R, C, GrayS)</l>
<l>            get_grayval(ImageV, R, C, GrayV)</l>
<c>            * Compute Histogram and form feature vector</c>
<c>            *tuple_histo_range: https://www.mvtec.com/doc/halcon/13/en/tuple_histo_range.html</c>
<l>            tuple_histo_range(GrayH, 0, 255, 8, HistoH, BinSize)</l>
<l>            tuple_histo_range(GrayS, 0, 255, 8, HistoS, BinSize)</l>
<l>            tuple_histo_range(GrayV, 0, 255, 8, HistoV, BinSize)</l>
<c>            * TODO Flatten?</c>
<c>            * Form the 24-D feature vector</c>
<l>            tuple_concat(HistoH, HistoS, HistogramFeatureVector)</l>
<l>            tuple_concat(HistogramFeatureVector, HistoV, HistogramFeatureVector)</l>
<c>            * Add the Feature Vector to the KNN samples</c>
<l>            add_sample_class_knn(KNNHandle, HistogramFeatureVector, J)</l>
<l>            Samples := Samples + 1</l>
<l>        endfor</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<c></c>
<c>* Create the Search Trees for the KNN Classifier</c>
<l>train_class_knn(KNNHandle, ['num_trees', 'normalization'], [4, 'true'])</l>
<c></c>
<c>* Save the KNN data</c>
<l>write_class_knn(KNNHandle, 'C:/Users/drhoffma/PycharmProjects/obies-eyes/halcon/knn_model.gnc')</l>
<c></c>
<c>* Test the KNN</c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
